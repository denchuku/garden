{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"path:/ - $parent [[$filename]] Homebrew Casks with autoupdate External Gardens Other git Other Google Cloud macOS Keyboard Shortcuts Other npm Shell oh-my-zsh Python pipenv Python Python Installation Python Python Libs Other Rust Shell Shell Shell Shell and Pipes Other ssh Homebrew Useful formulas und casks for homebrew Python Virtual environments (venv) \\<\u2014>","title":"Home"},{"location":"External%20Gardens/","text":"tips of GitHub - oronymzy/tips","title":"External Gardens"},{"location":"Homebrew/","text":"Homebrew is a great package manager vor macOS. It allows to install typical open source cli tools as well as closed source apps (with ui). It\u2019s very easy to instal, update and uninstall apps Especially covenient for programming frameworks (like dotnet) to keep up to date formula : normal packages for command line tools / frameworks cask : package for apps with ui tap : a repository where homebrew loads packages from (default: \u201chomebrew/cask\u201d and \u201chomebrew/core\u201d Links \u2693\ufe0e Useful formulas und casks for homebrew Casks with autoupdate Homebrew cheatsheet List of installable formulas Basics \u2693\ufe0e Install \u2693\ufe0e See Useful formulas und casks for homebrew . Show installed \u2693\ufe0e brew list Show outdated \u2693\ufe0e brew outdated Upgrade \u2693\ufe0e brew upgrade Search for formulas \u2693\ufe0e brew search firefox","title":"Index"},{"location":"Homebrew/#links","text":"Useful formulas und casks for homebrew Casks with autoupdate Homebrew cheatsheet List of installable formulas","title":"Links"},{"location":"Homebrew/#basics","text":"","title":"Basics"},{"location":"Homebrew/#install","text":"See Useful formulas und casks for homebrew .","title":"Install"},{"location":"Homebrew/#show-installed","text":"brew list","title":"Show installed"},{"location":"Homebrew/#show-outdated","text":"brew outdated","title":"Show outdated"},{"location":"Homebrew/#upgrade","text":"brew upgrade","title":"Upgrade"},{"location":"Homebrew/#search-for-formulas","text":"brew search firefox","title":"Search for formulas"},{"location":"Homebrew/Casks%20with%20autoupdate/","text":"Two types of casks are not automatically updated by homebrew : Casks with autoupdate : Use the update mechanism of the app Casks with version latest instead of a specific version number This information is visible with the brew info <name> command for these apps. buo/cask-upgrade \u2693\ufe0e GitHub - buo/homebrew-cask-upgrade: A command line tool for upgrading every outdated app installed by Homebrew Cask allows to better manage these apps. # Add tap once brew tap buo/cask-upgrade To update outdated apps and show a list of casks and their version number brew cu Use brew cu -a to reinstall apps with autoupdate. Use -f to reinstall apps with version latest .","title":"Casks with autoupdate"},{"location":"Homebrew/Casks%20with%20autoupdate/#buocask-upgrade","text":"GitHub - buo/homebrew-cask-upgrade: A command line tool for upgrading every outdated app installed by Homebrew Cask allows to better manage these apps. # Add tap once brew tap buo/cask-upgrade To update outdated apps and show a list of casks and their version number brew cu Use brew cu -a to reinstall apps with autoupdate. Use -f to reinstall apps with version latest .","title":"buo/cask-upgrade"},{"location":"Homebrew/Useful%20formulas%20und%20casks%20for%20homebrew/","text":"Formulas \u2693\ufe0e brew install node brew install git brew install rustup-init brew install mkdocs brew install brew-pip brew install pyinstaller Casks \u2693\ufe0e Casks are for applications with UI With autoupdate (= doesn\u2019t use homebrew to update) brew install --cask brave-browser brew install --cask element brew install --cask gog-galaxy brew install --cask obsidian brew install --cask sourcetree brew install --cask spotify brew install --cask stats brew install --cask typora brew install --cask visual-studio-code brew install --cask iterm2 Without autoupdate (=will be updated by homebrew) brew install --cask cryptomator brew install --cask libreoffice brew install --cask veracrypt brew install --cask zoom Fonts \u2693\ufe0e For some fonts svn is required :-( brew install svn brew tap homebrew/cask-fonts brew install font-inter brew install font-vollkorn brew install font-roboto brew install font-open-sans brew install font-meslo-lg","title":"Useful formulas und casks for homebrew"},{"location":"Homebrew/Useful%20formulas%20und%20casks%20for%20homebrew/#formulas","text":"brew install node brew install git brew install rustup-init brew install mkdocs brew install brew-pip brew install pyinstaller","title":"Formulas"},{"location":"Homebrew/Useful%20formulas%20und%20casks%20for%20homebrew/#casks","text":"Casks are for applications with UI With autoupdate (= doesn\u2019t use homebrew to update) brew install --cask brave-browser brew install --cask element brew install --cask gog-galaxy brew install --cask obsidian brew install --cask sourcetree brew install --cask spotify brew install --cask stats brew install --cask typora brew install --cask visual-studio-code brew install --cask iterm2 Without autoupdate (=will be updated by homebrew) brew install --cask cryptomator brew install --cask libreoffice brew install --cask veracrypt brew install --cask zoom","title":"Casks"},{"location":"Homebrew/Useful%20formulas%20und%20casks%20for%20homebrew/#fonts","text":"For some fonts svn is required :-( brew install svn brew tap homebrew/cask-fonts brew install font-inter brew install font-vollkorn brew install font-roboto brew install font-open-sans brew install font-meslo-lg","title":"Fonts"},{"location":"Other/Google%20Cloud/","text":"Install Google Cloud SDK (includes gsutil ): brew install google-cloud-sdk Copy content (including all files and sub-directories) of local directory localdir to bucket directory remotedir-tmp : gsutil -m cp -r ./localdir/** gs://bucket.domain.name/remotedir-tmp/ The trailing / is important. Remove and Move gsutil rm -r gs://bucket.domain.name/remotedir gsutil mv gs://bucket.domain.name/remotedir-tmp gs://bucket.domain.name/remotedir","title":"Google Cloud"},{"location":"Other/Rust/","text":"Install rustup-init $ brew install rustup-init $ rustup-init To uninstall: rustup self uninstall Check if in path (Rust compiler) rustc --version Update rustup rustup update Compile / build with cargo cargo build --release","title":"Rust"},{"location":"Other/git/","text":"Stage all changes (adds and removes, including sub directories) git add . Commit git commit -m \"<commit message>\" Push git push origin","title":"Git"},{"location":"Other/npm/","text":"Show globally installed packages \u2693\ufe0e npm -g list --depth = 0 Show directory where global packages are installed \u2693\ufe0e npm root -g Show outdated packages \u2693\ufe0e npm -g outdated Update all global packages \u2693\ufe0e npm update -g","title":"Npm"},{"location":"Other/npm/#show-globally-installed-packages","text":"npm -g list --depth = 0","title":"Show globally installed packages"},{"location":"Other/npm/#show-directory-where-global-packages-are-installed","text":"npm root -g","title":"Show directory where global packages are installed"},{"location":"Other/npm/#show-outdated-packages","text":"npm -g outdated","title":"Show outdated packages"},{"location":"Other/npm/#update-all-global-packages","text":"npm update -g","title":"Update all global packages"},{"location":"Other/ssh/","text":"SSH keys can be used to login with the ssh tool. It\u2019s also useful for accessing git repositories. Initial configuration / ssh directory \u2693\ufe0e ssh configuration files are located at ~/.ssh/ . If directory doesn\u2019te exist create it and limit access: chmod 700 ~/.ssh On macOS adjust ~/.ssh/config so that passwords for ssh keys can be fetched from macOS keychain automatically without having to enter the password every time. Host * AddKeysToAgent yes UseKeychain yes Protocol 2 # # Default Identity file # IdentityFile ~/.ssh/id_ed25519 The Ultimate Guide to SSH - Setting Up SSH Keys : With that, whenever you run ssh it will look for keys in Keychain Access. If it finds one, you will no longer be prompted for a password. Keys will also automatically be added to ssh-agent every time you restart your machine. Create key \u2693\ufe0e Create your private key / public key pair: ssh-keygen -t ed25519 -f ~/.ssh/id_github_com_ed25519 -C \"ID+username_@users.noreply.github.com\" It\u2019s recommended to set a password for the key (and save that password somewhere safe). -C : Your email. For github you can hide your email in commits ( Setting your commit email address - GitHub Docs ) -f : Specify location where key will be saved. If you don\u2019t specify it will have a default (e.g. .ssh/id_ed25519 ) If you don\u2019t use the default filename for the keys then you might have to specify the filename every time. A non-default filename might be useful if you need multiple keys. You can avoid having to specify the key with every ssh call be defining a host entry (see below). On macOS you can add the key to ssh agent so that you don\u2019t have to type the password every time the ssh key is used: ris:Apple macOS: ssh-add -K ~/.ssh/id_github_com_ed25519 -K is a macOS specific option This only has to be done once. Have a config for a specific host \u2693\ufe0e Edit ( ~/.ssh/config ) in order to specify keys and settings for specific hosts (e.g. github.com ): Host github.com Hostname github.com User git IdentitiesOnly yes IdentityFile ~/.ssh/id_github_com_ed25519 Copy public ssh key to clipboard \u2693\ufe0e ris:Apple macOS: pbcopy < ~/.ssh/id_github_com_ed25519.pub Test ssh connection \u2693\ufe0e Test if you can connect with ssh: ssh -T github.com","title":"Ssh"},{"location":"Other/ssh/#initial-configuration-ssh-directory","text":"ssh configuration files are located at ~/.ssh/ . If directory doesn\u2019te exist create it and limit access: chmod 700 ~/.ssh On macOS adjust ~/.ssh/config so that passwords for ssh keys can be fetched from macOS keychain automatically without having to enter the password every time. Host * AddKeysToAgent yes UseKeychain yes Protocol 2 # # Default Identity file # IdentityFile ~/.ssh/id_ed25519 The Ultimate Guide to SSH - Setting Up SSH Keys : With that, whenever you run ssh it will look for keys in Keychain Access. If it finds one, you will no longer be prompted for a password. Keys will also automatically be added to ssh-agent every time you restart your machine.","title":"Initial configuration / ssh directory"},{"location":"Other/ssh/#create-key","text":"Create your private key / public key pair: ssh-keygen -t ed25519 -f ~/.ssh/id_github_com_ed25519 -C \"ID+username_@users.noreply.github.com\" It\u2019s recommended to set a password for the key (and save that password somewhere safe). -C : Your email. For github you can hide your email in commits ( Setting your commit email address - GitHub Docs ) -f : Specify location where key will be saved. If you don\u2019t specify it will have a default (e.g. .ssh/id_ed25519 ) If you don\u2019t use the default filename for the keys then you might have to specify the filename every time. A non-default filename might be useful if you need multiple keys. You can avoid having to specify the key with every ssh call be defining a host entry (see below). On macOS you can add the key to ssh agent so that you don\u2019t have to type the password every time the ssh key is used: ris:Apple macOS: ssh-add -K ~/.ssh/id_github_com_ed25519 -K is a macOS specific option This only has to be done once.","title":"Create key"},{"location":"Other/ssh/#have-a-config-for-a-specific-host","text":"Edit ( ~/.ssh/config ) in order to specify keys and settings for specific hosts (e.g. github.com ): Host github.com Hostname github.com User git IdentitiesOnly yes IdentityFile ~/.ssh/id_github_com_ed25519","title":"Have a config for a specific host"},{"location":"Other/ssh/#copy-public-ssh-key-to-clipboard","text":"ris:Apple macOS: pbcopy < ~/.ssh/id_github_com_ed25519.pub","title":"Copy public ssh key to clipboard"},{"location":"Other/ssh/#test-ssh-connection","text":"Test if you can connect with ssh: ssh -T github.com","title":"Test ssh connection"},{"location":"Python/","text":"Python \u2693\ufe0e Python Installation pipenv How to structure projects Structuring Your Project \u2014 The Hitchhiker\u2019s Guide to Python Resources \u2693\ufe0e Python venv: how to create, activate, and delete \u2022 Python Land Tutorial","title":"Python"},{"location":"Python/#python","text":"Python Installation pipenv How to structure projects Structuring Your Project \u2014 The Hitchhiker\u2019s Guide to Python","title":"Python"},{"location":"Python/#resources","text":"Python venv: how to create, activate, and delete \u2022 Python Land Tutorial","title":"Resources"},{"location":"Python/Python%20Installation/","text":"Python installation \u2693\ufe0e Required: homebrew Install python \u2693\ufe0e brew install python In order not to use macOS old python, add new python to the path of the shell: In .zshrc : export PATH = \"/usr/local/opt/python/libexec/bin: $PATH \" Install pipenv \u2693\ufe0e Also install pipenv to manage virtual environments: brew install pipenv","title":"Python installation"},{"location":"Python/Python%20Installation/#python-installation","text":"Required: homebrew","title":"Python installation"},{"location":"Python/Python%20Installation/#install-python","text":"brew install python In order not to use macOS old python, add new python to the path of the shell: In .zshrc : export PATH = \"/usr/local/opt/python/libexec/bin: $PATH \"","title":"Install python"},{"location":"Python/Python%20Installation/#install-pipenv","text":"Also install pipenv to manage virtual environments: brew install pipenv","title":"Install pipenv"},{"location":"Python/Python%20Libs/","text":"ruamel.yaml: read and write yaml \u2693\ufe0e Documentation: ruamel.yaml \u2014 Python YAML package documentation ruamel.yaml \u00b7 PyPI colorama: print colors \u2693\ufe0e colorama \u00b7 PyPI ````python from colorama import Fore, Back, Style print(\u2018This is \u2018 + Back.GREEN + \u2018green colored\u2019 + Style.RESET_ALL + \u2018 text\u2019) ``` ````","title":"Python Libs"},{"location":"Python/Python%20Libs/#ruamelyaml-read-and-write-yaml","text":"Documentation: ruamel.yaml \u2014 Python YAML package documentation ruamel.yaml \u00b7 PyPI","title":"ruamel.yaml: read and write yaml"},{"location":"Python/Python%20Libs/#colorama-print-colors","text":"colorama \u00b7 PyPI ````python from colorama import Fore, Back, Style print(\u2018This is \u2018 + Back.GREEN + \u2018green colored\u2019 + Style.RESET_ALL + \u2018 text\u2019) ``` ````","title":"colorama: print colors"},{"location":"Python/Virtual%20environments%20%28venv%29/","text":"Create virtual environment \u2693\ufe0e python -m venv penv penv is the directory name Activate environment \u2693\ufe0e source penv/bin/activate Deactivate environment \u2693\ufe0e deactivate","title":"Virtual environments (venv)"},{"location":"Python/Virtual%20environments%20%28venv%29/#create-virtual-environment","text":"python -m venv penv penv is the directory name","title":"Create virtual environment"},{"location":"Python/Virtual%20environments%20%28venv%29/#activate-environment","text":"source penv/bin/activate","title":"Activate environment"},{"location":"Python/Virtual%20environments%20%28venv%29/#deactivate-environment","text":"deactivate","title":"Deactivate environment"},{"location":"Python/pipenv/","text":"Pipenv \u2693\ufe0e Allows to manage multiple environemnts and their requirements. Install pipenv \u2693\ufe0e Also install pipenv to manage virtual environments: brew install pipenv Environments \u2693\ufe0e Environments allow to have different project with different dependencies (and python versions). Create environment \u2693\ufe0e Typically create environment directly in the root of a project. This onyl has to be done once. cd prj-root pipenv install Enter environment \u2693\ufe0e Enter environment shell to be sure to have specified versions. cd prj-root pipenv shell Exit environment \u2693\ufe0e (When in environment shell:) exit Environment location \u2693\ufe0e Output Python interpreter information pipenv --py ~/.local/share/virtualenvs/md-mkdocs-material-helper-suciZAwh/bin/python Output Python interpreter information pipenv --venv ~/.local/share/virtualenvs/md-mkdocs-material-helper-suciZAwh Install packages in environment \u2693\ufe0e (When in environment shell:) pipenv install pyyaml Packages only needed for development pipenv install --dev pytest Uninstall package pipenv uninstall package_name Git considerations \u2693\ufe0e commit the Pipfile to GIT The lock file Pipfile.lock can be committed to GIT or added into your .gitignore Good example of readme.md (from Medium :) # Developers Instructions for installing this project on your local machine and getting it running in its own virtual environment. 1. Clone this project into a new directory - click the clone button above on GitHub to get the link and command to use 2. Ensure you have `pipenv` installed on your machine - installation documentation can be found here - https://docs.pipenv.org/en/latest/install/ 3. From the project root directory run `pipenv install --dev --pre` to create your virtual environment and install all the packages 4. Activate your virtual environment at any time using `pipenv shell` - note only do this from the project directory root 5. You can now run the program using `python main.py` or the tests using `python -m pytest` 6. Deactivate your virtual environment at any time using `exit` Ressources \u2693\ufe0e Pipenv for easier virtual environments | by Matt Gosden | Medium Python Pipenv: A Better Package Manager \u2022 Python Land Tutorial","title":"Pipenv"},{"location":"Python/pipenv/#pipenv","text":"Allows to manage multiple environemnts and their requirements.","title":"Pipenv"},{"location":"Python/pipenv/#install-pipenv","text":"Also install pipenv to manage virtual environments: brew install pipenv","title":"Install pipenv"},{"location":"Python/pipenv/#environments","text":"Environments allow to have different project with different dependencies (and python versions).","title":"Environments"},{"location":"Python/pipenv/#create-environment","text":"Typically create environment directly in the root of a project. This onyl has to be done once. cd prj-root pipenv install","title":"Create environment"},{"location":"Python/pipenv/#enter-environment","text":"Enter environment shell to be sure to have specified versions. cd prj-root pipenv shell","title":"Enter environment"},{"location":"Python/pipenv/#exit-environment","text":"(When in environment shell:) exit","title":"Exit environment"},{"location":"Python/pipenv/#environment-location","text":"Output Python interpreter information pipenv --py ~/.local/share/virtualenvs/md-mkdocs-material-helper-suciZAwh/bin/python Output Python interpreter information pipenv --venv ~/.local/share/virtualenvs/md-mkdocs-material-helper-suciZAwh","title":"Environment location"},{"location":"Python/pipenv/#install-packages-in-environment","text":"(When in environment shell:) pipenv install pyyaml Packages only needed for development pipenv install --dev pytest Uninstall package pipenv uninstall package_name","title":"Install packages in environment"},{"location":"Python/pipenv/#git-considerations","text":"commit the Pipfile to GIT The lock file Pipfile.lock can be committed to GIT or added into your .gitignore Good example of readme.md (from Medium :) # Developers Instructions for installing this project on your local machine and getting it running in its own virtual environment. 1. Clone this project into a new directory - click the clone button above on GitHub to get the link and command to use 2. Ensure you have `pipenv` installed on your machine - installation documentation can be found here - https://docs.pipenv.org/en/latest/install/ 3. From the project root directory run `pipenv install --dev --pre` to create your virtual environment and install all the packages 4. Activate your virtual environment at any time using `pipenv shell` - note only do this from the project directory root 5. You can now run the program using `python main.py` or the tests using `python -m pytest` 6. Deactivate your virtual environment at any time using `exit`","title":"Git considerations"},{"location":"Python/pipenv/#ressources","text":"Pipenv for easier virtual environments | by Matt Gosden | Medium Python Pipenv: A Better Package Manager \u2022 Python Land Tutorial","title":"Ressources"},{"location":"Shell/Shell%20and%20Pipes/","text":"Pass argument to stdin \u2693\ufe0e Option 1 \u2693\ufe0e echo \"hello\" | base64 Option 2 \u2693\ufe0e base64 <<< \"hello\" Option 3 (manual) \u2693\ufe0e base64 Then enter hello , \u21b5 to go on new (empty line), press \u2303 + d to EOF standard input Two commands \u2693\ufe0e mkdir ~/archivebox && cd ~/archivebox This is an icon ris:Firefox thing. ris:Firefox rir:Firefox","title":"Shell and Pipes"},{"location":"Shell/Shell%20and%20Pipes/#pass-argument-to-stdin","text":"","title":"Pass argument to stdin"},{"location":"Shell/Shell%20and%20Pipes/#option-1","text":"echo \"hello\" | base64","title":"Option 1"},{"location":"Shell/Shell%20and%20Pipes/#option-2","text":"base64 <<< \"hello\"","title":"Option 2"},{"location":"Shell/Shell%20and%20Pipes/#option-3-manual","text":"base64 Then enter hello , \u21b5 to go on new (empty line), press \u2303 + d to EOF standard input","title":"Option 3 (manual)"},{"location":"Shell/Shell%20and%20Pipes/#two-commands","text":"mkdir ~/archivebox && cd ~/archivebox This is an icon ris:Firefox thing. ris:Firefox rir:Firefox","title":"Two commands"},{"location":"Shell/Shell/","text":"Linking files \u2693\ufe0e Link file to a directory included in path # Assuming that \"/usr/local/bin/\" is in path, \"my-command\" is available in path after the link has been created $ ln -s ~/Documents/my-command /usr/local/bin/my-command Show location of command \u2693\ufe0e Command $ which git /usr/local/bin/git Who were command links to \u2693\ufe0e Command $ readlink /usr/local/bin/git ../Cellar/git/2.31.1/bin/git Open Finder from Terminal: open . To clear current command: \u2303 + U To set zsh as default shell: chsh -s /bin/zsh","title":"Shell"},{"location":"Shell/Shell/#linking-files","text":"Link file to a directory included in path # Assuming that \"/usr/local/bin/\" is in path, \"my-command\" is available in path after the link has been created $ ln -s ~/Documents/my-command /usr/local/bin/my-command","title":"Linking files"},{"location":"Shell/Shell/#show-location-of-command","text":"Command $ which git /usr/local/bin/git","title":"Show location of command"},{"location":"Shell/Shell/#who-were-command-links-to","text":"Command $ readlink /usr/local/bin/git ../Cellar/git/2.31.1/bin/git Open Finder from Terminal: open . To clear current command: \u2303 + U To set zsh as default shell: chsh -s /bin/zsh","title":"Who were command links to"},{"location":"Shell/oh-my-zsh/","text":"Oh my zsh \u2693\ufe0e \u201cOh my Zsh\u201d is an extension to the zsh shell. Url: Oh My Zsh - a delightful & open source framework for Zsh Your personal settings are located in file ~/.zshrc Installation directory is ~/.oh-my-zsh - If you want to override any of the default behaviors, just add a new file (ending in .zsh) in the custom/ directory, e.g. for aliases: ~/.oh-my-zsh/custom/aliases.zsh Powerlevel10k theme \u2693\ufe0e Url: GitHub - romkatv/powerlevel10k: A Zsh theme To configure call p10k configure and answer questions. This results in the settings to be saved in ~/.p10k.zsh . Install Meslo Nerd font ( GitHub - romkatv/powerlevel10k: A Zsh theme ) and set font in your terminal app. JSON tools \u2693\ufe0e ohmyzsh/plugins/jsontools at master \u00b7 ohmyzsh/ohmyzsh \u00b7 GitHub Pretty Print JSON: $ echo '{\"a\":\"foo\",\"b\":true}' | pp_json { \"a\": \"foo\", \"b\": true }","title":"Oh my zsh"},{"location":"Shell/oh-my-zsh/#oh-my-zsh","text":"\u201cOh my Zsh\u201d is an extension to the zsh shell. Url: Oh My Zsh - a delightful & open source framework for Zsh Your personal settings are located in file ~/.zshrc Installation directory is ~/.oh-my-zsh - If you want to override any of the default behaviors, just add a new file (ending in .zsh) in the custom/ directory, e.g. for aliases: ~/.oh-my-zsh/custom/aliases.zsh","title":"Oh my zsh"},{"location":"Shell/oh-my-zsh/#powerlevel10k-theme","text":"Url: GitHub - romkatv/powerlevel10k: A Zsh theme To configure call p10k configure and answer questions. This results in the settings to be saved in ~/.p10k.zsh . Install Meslo Nerd font ( GitHub - romkatv/powerlevel10k: A Zsh theme ) and set font in your terminal app.","title":"Powerlevel10k theme"},{"location":"Shell/oh-my-zsh/#json-tools","text":"ohmyzsh/plugins/jsontools at master \u00b7 ohmyzsh/ohmyzsh \u00b7 GitHub Pretty Print JSON: $ echo '{\"a\":\"foo\",\"b\":true}' | pp_json { \"a\": \"foo\", \"b\": true }","title":"JSON tools"},{"location":"macOS/Keyboard%20Shortcuts/","text":"Show hidden files in finder \u2318 + \u21e7 + . Show all windows of current app \u2303 + \u2193 Show \u201cInsert Emoji\u201d \u2303 + \u2318 + \u2423 Key reference \u2693\ufe0e Key Symbol Html Unicode name Command \u2318 \u2318 place of interest Control \u2303 \u2303 arrowhead Option / Win Alt \u2325 \u2325 option Shift \u21e7 \u21e7 upwards white arrow Right arrow \u2192 \u2192 \u2192 Left arrow \u2190 \u2190 \u2190 Up arrow \u2191 \u2191 \u2191 Down arrow \u2193 \u2193 \u2193 Tab \u21e5 \u21e5 Delete, Backspace \u232b \u232b Return \u21a9 \u21a9 Return \u21b5 \u21b5 \u21b5 Space \u2423 open box","title":"Keyboard Shortcuts"},{"location":"macOS/Keyboard%20Shortcuts/#key-reference","text":"Key Symbol Html Unicode name Command \u2318 \u2318 place of interest Control \u2303 \u2303 arrowhead Option / Win Alt \u2325 \u2325 option Shift \u21e7 \u21e7 upwards white arrow Right arrow \u2192 \u2192 \u2192 Left arrow \u2190 \u2190 \u2190 Up arrow \u2191 \u2191 \u2191 Down arrow \u2193 \u2193 \u2193 Tab \u21e5 \u21e5 Delete, Backspace \u232b \u232b Return \u21a9 \u21a9 Return \u21b5 \u21b5 \u21b5 Space \u2423 open box","title":"Key reference"}]}